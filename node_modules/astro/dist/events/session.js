const EVENT_SESSION = "ASTRO_CLI_SESSION_STARTED";
const multiLevelKeys = /* @__PURE__ */ new Set([
  "build",
  "markdown",
  "markdown.shikiConfig",
  "server",
  "vite",
  "vite.resolve",
  "vite.css",
  "vite.json",
  "vite.server",
  "vite.server.fs",
  "vite.build",
  "vite.preview",
  "vite.optimizeDeps",
  "vite.ssr",
  "vite.worker"
]);
function configKeys(obj, parentKey) {
  if (!obj) {
    return [];
  }
  return Object.entries(obj).map(([key, value]) => {
    if (typeof value === "object" && !Array.isArray(value)) {
      const localKey = parentKey ? parentKey + "." + key : key;
      if (multiLevelKeys.has(localKey)) {
        let keys = configKeys(value, localKey).map((subkey) => key + "." + subkey);
        keys.unshift(key);
        return keys;
      }
    }
    return key;
  }).flat(1);
}
function eventCliSession(cliCommand, userConfig, flags) {
  const configValues = userConfig ? {
    markdownPlugins: [
      ...userConfig?.markdown?.remarkPlugins?.map(
        (p) => typeof p === "string" ? p : typeof p
      ) ?? [],
      ...userConfig?.markdown?.rehypePlugins?.map(
        (p) => typeof p === "string" ? p : typeof p
      ) ?? []
    ],
    adapter: userConfig?.adapter?.name ?? null,
    integrations: (userConfig?.integrations ?? []).filter(Boolean).flat().map((i) => i?.name),
    trailingSlash: userConfig?.trailingSlash,
    build: userConfig?.build ? {
      format: userConfig?.build?.format
    } : void 0,
    markdown: userConfig?.markdown ? {
      drafts: userConfig.markdown?.drafts,
      syntaxHighlight: userConfig.markdown?.syntaxHighlight
    } : void 0
  } : void 0;
  const cliFlags = flags ? Object.keys(flags).filter((name) => name != "_") : void 0;
  const payload = {
    cliCommand,
    configKeys: userConfig ? configKeys(userConfig, "") : void 0,
    config: configValues,
    flags: cliFlags
  };
  return [{ eventName: EVENT_SESSION, payload }];
}
export {
  eventCliSession
};
